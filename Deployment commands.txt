################################################
#Provisioning deployment commands
################################################


==========================
========Kubernetes========
==========================
//go to cluster context
aws eks --region us-west-2 update-kubeconfig --name qt-practical-devops-eks					

//create namespace for cluster name 'eks-ns'
kubectl create ns eks-ns																	

//change current context to new namespace
kubectl config set-context --current --namespace eks-ns										

//apply manifest file for mongodb
kubectl apply -f mongodb.yaml																

//apply manifest file for backend
kubectl apply -f backend.yaml																

//apply manifest file for frontend
kubectl apply -f frontend.yaml																

//forward port to service frontend 
kubectl port-forward service/frontend 3000:3000

//install ingress-nginx
helm repo add nginx-stable https://helm.nginx.com/stable
helm repo update
helm upgrade --install ingress-nginx ingress-nginx --repo https://kubernetes.github.io/ingress-nginx --namespace ingress-nginx --create-namespace

//get pods and service of ingress
kubectl get pods -n ingress-nginx
kubectl get services -n ingress-nginx

//apply manifest file for ingress
kubectl apply -f ingress.yml

//check ingress status
kubectl get ingress -o wide

cd /var/lib/jenkins/frontend-cd-pipeline/cd-pipeline
==========================
=======Docker & ECR=======
==========================

//Use AWS CLI to access
aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 430963847993.dkr.ecr.us-west-2.amazonaws.com

//At root folder use these commands
//Build frontend 
docker build ./frontend -t frontend

//Build backend
docker build ./backend -t backend

//Verify image
docker image ls

//Start application, this command will pull db image (mongodb) and start the app through port 3000
docker-compose up

//Tag images to push to ECR
//front end
docker tag frontend:latest 430963847993.dkr.ecr.us-west-2.amazonaws.com/qt-practical-devops-ecr-frontend:1

//backend
docker tag backend:latest 430963847993.dkr.ecr.us-west-2.amazonaws.com/qt-practical-devops-ecr-backend:1

//Push image to registry
docker push 430963847993.dkr.ecr.us-west-2.amazonaws.com/qt-practical-devops-ecr-frontend:1
docker push 430963847993.dkr.ecr.us-west-2.amazonaws.com/qt-practical-devops-ecr-backend:1

kubectl rollout restart

kubectl create secret docker-registry regcred \
  --docker-server=<aws-account-id>.dkr.ecr.<aws-region>.amazonaws.com \
  --docker-username=AWS \
  --docker-password=$(aws ecr get-login-password) \
  -o yaml

==========================
======Jenkins CI/CD======= 
==========================
//Install Jenkins
Refer the following link: https://www.jenkins.io/doc/tutorials/tutorial-for-installing-jenkins-on-AWS/

sudo yum update –y

sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo
	
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

sudo yum upgrade

sudo dnf install java-11-amazon-corretto -y

sudo yum install jenkins -y

sudo systemctl enable jenkins

sudo systemctl start jenkins

//Install git for EC2
sudo yum install git -y

//Intall Docker for EC2
sudo yum install docker
sudo systemctl start docker
sudo usermod -a -G docker jenkins

//Install Trivy
sudo rpm -ivh https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.rpm


//Install kubectl for EC2
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

kubectl version --client

OPEN TRAFFIC FOR CLUSTER ADDITIONAL SECURITY GROUPS BEFORE APPLYING MANIFEST FILE

//Install helm for EC2
curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
chmod 700 get_helm.sh
./get_helm.sh




//Install supported plugins, add credentials for AWS and GitHub
sudo cat /var/lib/jenkins/secrets/initialAdminPassword

Refer the following link: https://sweetcode.io/how-to-deploy-an-application-to-kubernetes-cluster-using-jenkins-ci-cd-pipeline/
https://octopus.com/blog/jenkins-docker-ecr
https://plugins.jenkins.io/amazon-ecr/
Plugins:
- Kubernetes
- Amazon EC2
- Docker Pipeline
- Purge Job History
- Amazon ECR
//Install plugin Amazon ECR, Docker pipeline, Kubernetes for Jenkins

Credentials:
- AWS credentials
- GitHub credentials

Github repo webhook

==========================
========Monitoring======== 
==========================
cd monitoring

//Prometheus
kubectl create namespace prometheus

Change namespace to istio-system
kubectl create -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/master/bundle.yaml		

//install crd

helm repo add prometheus-community https://prometheus-community.github.io/helm-charts


helm install prometheus prometheus-community/prometheus --namespace prometheus --set alertmanager.persistentVolume.storageClass="gp2" --set server.persistentVolume.storageClass="gp2"

helm install prometheus prometheus-community/prometheus -f ./prometheus/values.yaml --set alertmanager.persistentVolume.storageClass="gp2" --set server.persistentVolume.storageClass="gp2"

kubectl port-forward deployment/prometheus-server 9090:9090 -n prometheus

kubectl apply -f ./prometheus/backend_serviceMonitor.yaml
//Grafana
kubectl create namespace grafana

helm install grafana grafana/grafana --set persistence.storageClassName="gp2" --set persistence.enabled=true --set adminPassword='Pa55w0rd' --values ./grafana/grafana.yaml --set service.type=LoadBalancer

kubectl get svc -n istio-system
==========================
=========Argo CD========== 
==========================
kubectl create namespace argocd

kubectl apply -n argocd -f  https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=”{.data.password}” 

kubectl port-forward svc/argocd-server -n argocd 8082:443

//Rollout & Bluegreen
kubectl create namespace argo-rollouts

#Image updater
//install
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-image-updater/stable/manifests/install.yaml

//edit config map
kubectl edit configmaps --namespace argocd argocd-image-updater-config

//input this:
data:
  log.level: debug
  registries.conf: |
    registries:
    - name: Elastic Container Registry
      prefix: 430963847993.dkr.ecr.us-west-2.amazonaws.com/qt-practical-devops-ecr-frontend
      api_url: https://430963847993.dkr.ecr.us-west-2.amazonaws.com/qt-practical-devops-ecr-frontend
      credentials: pullsecret:argocd/mycontainerregistry-secret
      default: true

//create secret
kubectl -n argocd create secret docker-registry mycontainerregistry-secret --docker-server=430963847993.dkr.ecr.us-west-2.amazonaws.com/qt-practical-devops-ecr-frontend --docker-username=AWS --docker-password=$(aws ecr get-login-password --region us-west-2 --profile default) -o yaml --dry-run=client | kubectl -n argocd apply -f -

kubectl -n argocd create secret generic git-creds --from-literal=username=<github username> --from-literal=password=<personal access token> 

//restart
kubectl -n argocd rollout restart deployment argocd-image-updater 

//check log
kubectl --namespace argocd logs --selector app.kubernetes.io/name=argocd-image-updater --follow

==========================
========Helm Chart========
==========================

//go to root folder
cd apps

//install dependencies
helm dependency build

//apply helm
helm install my-release .

//verify helm
helm list

//get all k8s pods
kubectl get all

==========================
==========Istio===========
==========================
//Istio install
helm repo add istio https://istio-release.storage.googleapis.com/charts

helm repo update

helm install istio-base istio/base -n istio-system --create-namespace --set defaultRevision=default

helm install istiod istio/istiod -n istio-system --wait

helm ls -n istio-system

kubectl get deployments -n istio-system

//Create gateway
kubectl apply -f ./istio/gateway.yaml

kubectl apply -f ./istio/virtual-service.yaml

//query metric
sum(container_memory_working_set_bytes{namespace='eks-ns'}) by (pod)