pipeline {
    environment {
    registry = '430963847993.dkr.ecr.us-west-2.amazonaws.com/qt-practical-devops-ecr'
    registryCredential = 'aws-credentials'
    appName = "frontend"
    version = "$BUILD_NUMBER"
    awsRegion = "us-west-2"
    eksName = "qt-practical-devops-eks"
    }
    agent any
    options {
        skipStagesAfterUnstable()
    }
    stages {

       stage('Clone repository') 
       { 
            steps 
            { 
                script
                {
                    checkout scm
                }
            }
        }

        stage ("Deploy Frontend To K8S") 
        {
            steps
            {
               withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "aws-credentials",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) 
                {
                    script
                    {
                        docker.withRegistry("https://" + registry, "ecr:us-west-2:" + registryCredential) 
                        {
                            sh "export registry=${registry}; export appname=${appName}; export version=${version}; \
                            envsubst < cd-pipeline/eks-template/deployment.yaml > cd-pipeline/eks-template/deployment.yaml ; envsubst < cd-pipeline/eks-template/service.yaml > cd-pipeline/eks-template/deployment.yaml"
                            sh "aws eks --region ${awsRegion} update-kubeconfig --name ${eksName}"
                            sh "kubectl apply -f cd-pipeline/eks-template/deployment.yaml"
                            sh "kubectl apply -f cd-pipeline/eks-template/service.yaml"
                        }
                    }
                }
                
            }
        
        }
    }
}